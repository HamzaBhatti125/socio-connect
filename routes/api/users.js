const express = require("express");
const gravatar = require("gravatar");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const keys = require("../../config/keys");
const passport = require("passport");


const router = express.Router();

// loading User model (mongoose)
const User = require("../../models/User");

// load input validation
const validateRegisterInput = require("../../validation/register");

// load input validation
const validateLoginInput = require("../../validation/login");


// ## ROUTES ##

// #route   GET     api/users/all                    #Private
// #description     return all users except the login one

router.get("/all", passport.authenticate("jwt", {
    session: false
}), (req, res) => {

    let current_user_id = req.user.id;

    User.find({_id: {$ne: current_user_id}})
    .then((users)=>{

        res.json(users);
    })
    .catch((err)=>{
        console.log(err);
    });
});




// #route POST api/users/register                    #Public
// #description user registration

router.post("/register", (req, res) => {

    //validation of data
    const {errors, isValid} = validateRegisterInput(req.body);

    //check validation
    if (!isValid){ 
        return res.status(400).json(errors);
    }

    //checking if user with same email exists in DB
    User.findOne({
            email: req.body.email
        })
        .then((user) => {
            // if user exists then returning error
            if (user) {       
                errors.email = "email already exists";

                return res.status(400).json(errors);
            } else {

                // if it doesn't then creating a new user
                // gravatar config.
                const avatar = gravatar.url(req.body.email, {
                    s: "200", // size
                    r: "pg", // rating
                    d: "mm"
                });

                // creating new user from User model
                const newUser = new User({
                    name: req.body.name,
                    email: req.body.email,
                    avatar: avatar,
                    password: req.body.password
                });

                // hashing password before storing in DB
                bcrypt.genSalt(10, (err, salt) => {
                    bcrypt.hash(newUser.password, salt, (err, hash) => {
                        if (err) {
                            throw err;
                        }

                        // setting password = hash generated by salt
                        newUser.password = hash;

                        // saving new user in DB
                        newUser.save()
                            .then((user) => {
                                res.json(user) // Sending back new user data
                            })
                            .catch((err) => {
                                console.log(err);
                            });
                    });
                });
            }
        });
});



// #route GET api/users/login                    #Public
// #description login user and return token

router.post("/login", (req, res) => {

     //validation of data
     const {errors, isValid} = validateLoginInput(req.body);

     //check validation
     if (!isValid){ 
         return res.status(400).json(errors);
     } 

    const email = req.body.email;
    const password = req.body.password;

    // check if email exists in DB
    User.findOne({
            email
        })
        .then((user) => {

            // checking user is true or not
            if (!user) {
                errors.email = "user not found";

                return res.status(404).json(errors);
            }

            // checking password
            bcrypt.compare(password, user.password)
                .then((isMatch) => {

                    // check if user is matched

                    // user matched
                    if (isMatch) {

                        const payload = {
                            id: user.id,
                            name: user.name,
                            avatar: user.avatar
                        };

                        // signing token
                        jwt.sign(payload, keys.secretOrKey, {
                            expiresIn: 3600
                        }, (err, token) => {
                            res.json({
                                success: true,
                                token: "Bearer " + token
                            });
                        });


                    } else {
                        errors.password = "password not correct"
                        return res.status(400).json(errors
                            );
                    }
                });
        });

});



// #route GET api/users/current                    #Private
// #description return current user

router.get("/current", passport.authenticate("jwt", {
    session: false
}), (req, res) => {
    res.json({
        id: req.user.id,
        name: req.user.name,
        email: req.user.email
    });
});


router.get("/:id", passport.authenticate("jwt", {
    session: false
}), (req, res) => {

    let to_find = req.params.id;

    User.find({_id: to_find})
    .then((user)=>{
        res.json(user);
    })
    .catch((err)=>{
        console.log(err);
    });
});

module.exports = router;